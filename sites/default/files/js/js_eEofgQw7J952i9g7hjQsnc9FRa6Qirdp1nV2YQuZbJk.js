/**
 * @file
 * Parse inline JSON and initialize the drupalSettings global object.
 */

(function () {

  'use strict';

  // Use direct child elements to harden against XSS exploits when CSP is on.
  var settingsElement = document.querySelector('head > script[type="application/json"][data-drupal-selector="drupal-settings-json"], body > script[type="application/json"][data-drupal-selector="drupal-settings-json"]');

  /**
   * Variable generated by Drupal with all the configuration created from PHP.
   *
   * @global
   *
   * @type {object}
   */
  window.drupalSettings = {};

  if (settingsElement !== null) {
    window.drupalSettings = JSON.parse(settingsElement.textContent);
  }
})();
;
/**
 * @file
 * Defines the Drupal JavaScript API.
 */

/**
 * A jQuery object, typically the return value from a `$(selector)` call.
 *
 * Holds an HTMLElement or a collection of HTMLElements.
 *
 * @typedef {object} jQuery
 *
 * @prop {number} length=0
 *   Number of elements contained in the jQuery object.
 */

/**
 * Variable generated by Drupal that holds all translated strings from PHP.
 *
 * Content of this variable is automatically created by Drupal when using the
 * Interface Translation module. It holds the translation of strings used on
 * the page.
 *
 * This variable is used to pass data from the backend to the frontend. Data
 * contained in `drupalSettings` is used during behavior initialization.
 *
 * @global
 *
 * @var {object} drupalTranslations
 */

/**
 * Global Drupal object.
 *
 * All Drupal JavaScript APIs are contained in this namespace.
 *
 * @global
 *
 * @namespace
 */
window.Drupal = {behaviors: {}, locale: {}};

// JavaScript should be made compatible with libraries other than jQuery by
// wrapping it in an anonymous closure.
(function (Drupal, drupalSettings, drupalTranslations) {

  'use strict';

  /**
   * Helper to rethrow errors asynchronously.
   *
   * This way Errors bubbles up outside of the original callstack, making it
   * easier to debug errors in the browser.
   *
   * @param {Error|string} error
   *   The error to be thrown.
   */
  Drupal.throwError = function (error) {
    setTimeout(function () { throw error; }, 0);
  };

  /**
   * Custom error thrown after attach/detach if one or more behaviors failed.
   * Initializes the JavaScript behaviors for page loads and Ajax requests.
   *
   * @callback Drupal~behaviorAttach
   *
   * @param {HTMLDocument|HTMLElement} context
   *   An element to detach behaviors from.
   * @param {?object} settings
   *   An object containing settings for the current context. It is rarely used.
   *
   * @see Drupal.attachBehaviors
   */

  /**
   * Reverts and cleans up JavaScript behavior initialization.
   *
   * @callback Drupal~behaviorDetach
   *
   * @param {HTMLDocument|HTMLElement} context
   *   An element to attach behaviors to.
   * @param {object} settings
   *   An object containing settings for the current context.
   * @param {string} trigger
   *   One of `'unload'`, `'move'`, or `'serialize'`.
   *
   * @see Drupal.detachBehaviors
   */

  /**
   * @typedef {object} Drupal~behavior
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Function run on page load and after an Ajax call.
   * @prop {Drupal~behaviorDetach} detach
   *   Function run when content is serialized or removed from the page.
   */

  /**
   * Holds all initialization methods.
   *
   * @namespace Drupal.behaviors
   *
   * @type {Object.<string, Drupal~behavior>}
   */

  /**
   * Defines a behavior to be run during attach and detach phases.
   *
   * Attaches all registered behaviors to a page element.
   *
   * Behaviors are event-triggered actions that attach to page elements,
   * enhancing default non-JavaScript UIs. Behaviors are registered in the
   * {@link Drupal.behaviors} object using the method 'attach' and optionally
   * also 'detach'.
   *
   * {@link Drupal.attachBehaviors} is added below to the `jQuery.ready` event
   * and therefore runs on initial page load. Developers implementing Ajax in
   * their solutions should also call this function after new page content has
   * been loaded, feeding in an element to be processed, in order to attach all
   * behaviors to the new content.
   *
   * Behaviors should use `var elements =
   * $(context).find(selector).once('behavior-name');` to ensure the behavior is
   * attached only once to a given element. (Doing so enables the reprocessing
   * of given elements, which may be needed on occasion despite the ability to
   * limit behavior attachment to a particular element.)
   *
   * @example
   * Drupal.behaviors.behaviorName = {
   *   attach: function (context, settings) {
   *     // ...
   *   },
   *   detach: function (context, settings, trigger) {
   *     // ...
   *   }
   * };
   *
   * @param {HTMLDocument|HTMLElement} [context=document]
   *   An element to attach behaviors to.
   * @param {object} [settings=drupalSettings]
   *   An object containing settings for the current context. If none is given,
   *   the global {@link drupalSettings} object is used.
   *
   * @see Drupal~behaviorAttach
   * @see Drupal.detachBehaviors
   *
   * @throws {Drupal~DrupalBehaviorError}
   */
  Drupal.attachBehaviors = function (context, settings) {
    context = context || document;
    settings = settings || drupalSettings;
    var behaviors = Drupal.behaviors;
    // Execute all of them.
    for (var i in behaviors) {
      if (behaviors.hasOwnProperty(i) && typeof behaviors[i].attach === 'function') {
        // Don't stop the execution of behaviors in case of an error.
        try {
          behaviors[i].attach(context, settings);
        }
        catch (e) {
          Drupal.throwError(e);
        }
      }
    }
  };

  /**
   * Detaches registered behaviors from a page element.
   *
   * Developers implementing Ajax in their solutions should call this function
   * before page content is about to be removed, feeding in an element to be
   * processed, in order to allow special behaviors to detach from the content.
   *
   * Such implementations should use `.findOnce()` and `.removeOnce()` to find
   * elements with their corresponding `Drupal.behaviors.behaviorName.attach`
   * implementation, i.e. `.removeOnce('behaviorName')`, to ensure the behavior
   * is detached only from previously processed elements.
   *
   * @param {HTMLDocument|HTMLElement} [context=document]
   *   An element to detach behaviors from.
   * @param {object} [settings=drupalSettings]
   *   An object containing settings for the current context. If none given,
   *   the global {@link drupalSettings} object is used.
   * @param {string} [trigger='unload']
   *   A string containing what's causing the behaviors to be detached. The
   *   possible triggers are:
   *   - `'unload'`: The context element is being removed from the DOM.
   *   - `'move'`: The element is about to be moved within the DOM (for example,
   *     during a tabledrag row swap). After the move is completed,
   *     {@link Drupal.attachBehaviors} is called, so that the behavior can undo
   *     whatever it did in response to the move. Many behaviors won't need to
   *     do anything simply in response to the element being moved, but because
   *     IFRAME elements reload their "src" when being moved within the DOM,
   *     behaviors bound to IFRAME elements (like WYSIWYG editors) may need to
   *     take some action.
   *   - `'serialize'`: When an Ajax form is submitted, this is called with the
   *     form as the context. This provides every behavior within the form an
   *     opportunity to ensure that the field elements have correct content
   *     in them before the form is serialized. The canonical use-case is so
   *     that WYSIWYG editors can update the hidden textarea to which they are
   *     bound.
   *
   * @throws {Drupal~DrupalBehaviorError}
   *
   * @see Drupal~behaviorDetach
   * @see Drupal.attachBehaviors
   */
  Drupal.detachBehaviors = function (context, settings, trigger) {
    context = context || document;
    settings = settings || drupalSettings;
    trigger = trigger || 'unload';
    var behaviors = Drupal.behaviors;
    // Execute all of them.
    for (var i in behaviors) {
      if (behaviors.hasOwnProperty(i) && typeof behaviors[i].detach === 'function') {
        // Don't stop the execution of behaviors in case of an error.
        try {
          behaviors[i].detach(context, settings, trigger);
        }
        catch (e) {
          Drupal.throwError(e);
        }
      }
    }
  };

  /**
   * Encodes special characters in a plain-text string for display as HTML.
   *
   * @param {string} str
   *   The string to be encoded.
   *
   * @return {string}
   *   The encoded string.
   *
   * @ingroup sanitization
   */
  Drupal.checkPlain = function (str) {
    str = str.toString()
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
    return str;
  };

  /**
   * Replaces placeholders with sanitized values in a string.
   *
   * @param {string} str
   *   A string with placeholders.
   * @param {object} args
   *   An object of replacements pairs to make. Incidences of any key in this
   *   array are replaced with the corresponding value. Based on the first
   *   character of the key, the value is escaped and/or themed:
   *    - `'!variable'`: inserted as is.
   *    - `'@variable'`: escape plain text to HTML ({@link Drupal.checkPlain}).
   *    - `'%variable'`: escape text and theme as a placeholder for user-
   *      submitted content ({@link Drupal.checkPlain} +
   *      `{@link Drupal.theme}('placeholder')`).
   *
   * @return {string}
   *   The formatted string.
   *
   * @see Drupal.t
   */
  Drupal.formatString = function (str, args) {
    // Keep args intact.
    var processedArgs = {};
    // Transform arguments before inserting them.
    for (var key in args) {
      if (args.hasOwnProperty(key)) {
        switch (key.charAt(0)) {
          // Escaped only.
          case '@':
            processedArgs[key] = Drupal.checkPlain(args[key]);
            break;

          // Pass-through.
          case '!':
            processedArgs[key] = args[key];
            break;

          // Escaped and placeholder.
          default:
            processedArgs[key] = Drupal.theme('placeholder', args[key]);
            break;
        }
      }
    }

    return Drupal.stringReplace(str, processedArgs, null);
  };

  /**
   * Replaces substring.
   *
   * The longest keys will be tried first. Once a substring has been replaced,
   * its new value will not be searched again.
   *
   * @param {string} str
   *   A string with placeholders.
   * @param {object} args
   *   Key-value pairs.
   * @param {Array|null} keys
   *   Array of keys from `args`. Internal use only.
   *
   * @return {string}
   *   The replaced string.
   */
  Drupal.stringReplace = function (str, args, keys) {
    if (str.length === 0) {
      return str;
    }

    // If the array of keys is not passed then collect the keys from the args.
    if (!Array.isArray(keys)) {
      keys = [];
      for (var k in args) {
        if (args.hasOwnProperty(k)) {
          keys.push(k);
        }
      }

      // Order the keys by the character length. The shortest one is the first.
      keys.sort(function (a, b) { return a.length - b.length; });
    }

    if (keys.length === 0) {
      return str;
    }

    // Take next longest one from the end.
    var key = keys.pop();
    var fragments = str.split(key);

    if (keys.length) {
      for (var i = 0; i < fragments.length; i++) {
        // Process each fragment with a copy of remaining keys.
        fragments[i] = Drupal.stringReplace(fragments[i], args, keys.slice(0));
      }
    }

    return fragments.join(args[key]);
  };

  /**
   * Translates strings to the page language, or a given language.
   *
   * See the documentation of the server-side t() function for further details.
   *
   * @param {string} str
   *   A string containing the English text to translate.
   * @param {Object.<string, string>} [args]
   *   An object of replacements pairs to make after translation. Incidences
   *   of any key in this array are replaced with the corresponding value.
   *   See {@link Drupal.formatString}.
   * @param {object} [options]
   *   Additional options for translation.
   * @param {string} [options.context='']
   *   The context the source string belongs to.
   *
   * @return {string}
   *   The formatted string.
   *   The translated string.
   */
  Drupal.t = function (str, args, options) {
    options = options || {};
    options.context = options.context || '';

    // Fetch the localized version of the string.
    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.strings && drupalTranslations.strings[options.context] && drupalTranslations.strings[options.context][str]) {
      str = drupalTranslations.strings[options.context][str];
    }

    if (args) {
      str = Drupal.formatString(str, args);
    }
    return str;
  };

  /**
   * Returns the URL to a Drupal page.
   *
   * @param {string} path
   *   Drupal path to transform to URL.
   *
   * @return {string}
   *   The full URL.
   */
  Drupal.url = function (path) {
    return drupalSettings.path.baseUrl + drupalSettings.path.pathPrefix + path;
  };

  /**
   * Returns the passed in URL as an absolute URL.
   *
   * @param {string} url
   *   The URL string to be normalized to an absolute URL.
   *
   * @return {string}
   *   The normalized, absolute URL.
   *
   * @see https://github.com/angular/angular.js/blob/v1.4.4/src/ng/urlUtils.js
   * @see https://grack.com/blog/2009/11/17/absolutizing-url-in-javascript
   * @see https://github.com/jquery/jquery-ui/blob/1.11.4/ui/tabs.js#L53
   */
  Drupal.url.toAbsolute = function (url) {
    var urlParsingNode = document.createElement('a');

    // Decode the URL first; this is required by IE <= 6. Decoding non-UTF-8
    // strings may throw an exception.
    try {
      url = decodeURIComponent(url);
    }
    catch (e) {
      // Empty.
    }

    urlParsingNode.setAttribute('href', url);

    // IE <= 7 normalizes the URL when assigned to the anchor node similar to
    // the other browsers.
    return urlParsingNode.cloneNode(false).href;
  };

  /**
   * Returns true if the URL is within Drupal's base path.
   *
   * @param {string} url
   *   The URL string to be tested.
   *
   * @return {bool}
   *   `true` if local.
   *
   * @see https://github.com/jquery/jquery-ui/blob/1.11.4/ui/tabs.js#L58
   */
  Drupal.url.isLocal = function (url) {
    // Always use browser-derived absolute URLs in the comparison, to avoid
    // attempts to break out of the base path using directory traversal.
    var absoluteUrl = Drupal.url.toAbsolute(url);
    var protocol = location.protocol;

    // Consider URLs that match this site's base URL but use HTTPS instead of HTTP
    // as local as well.
    if (protocol === 'http:' && absoluteUrl.indexOf('https:') === 0) {
      protocol = 'https:';
    }
    var baseUrl = protocol + '//' + location.host + drupalSettings.path.baseUrl.slice(0, -1);

    // Decoding non-UTF-8 strings may throw an exception.
    try {
      absoluteUrl = decodeURIComponent(absoluteUrl);
    }
    catch (e) {
      // Empty.
    }
    try {
      baseUrl = decodeURIComponent(baseUrl);
    }
    catch (e) {
      // Empty.
    }

    // The given URL matches the site's base URL, or has a path under the site's
    // base URL.
    return absoluteUrl === baseUrl || absoluteUrl.indexOf(baseUrl + '/') === 0;
  };

  /**
   * Formats a string containing a count of items.
   *
   * This function ensures that the string is pluralized correctly. Since
   * {@link Drupal.t} is called by this function, make sure not to pass
   * already-localized strings to it.
   *
   * See the documentation of the server-side
   * \Drupal\Core\StringTranslation\TranslationInterface::formatPlural()
   * function for more details.
   *
   * @param {number} count
   *   The item count to display.
   * @param {string} singular
   *   The string for the singular case. Please make sure it is clear this is
   *   singular, to ease translation (e.g. use "1 new comment" instead of "1
   *   new"). Do not use @count in the singular string.
   * @param {string} plural
   *   The string for the plural case. Please make sure it is clear this is
   *   plural, to ease translation. Use @count in place of the item count, as in
   *   "@count new comments".
   * @param {object} [args]
   *   An object of replacements pairs to make after translation. Incidences
   *   of any key in this array are replaced with the corresponding value.
   *   See {@link Drupal.formatString}.
   *   Note that you do not need to include @count in this array.
   *   This replacement is done automatically for the plural case.
   * @param {object} [options]
   *   The options to pass to the {@link Drupal.t} function.
   *
   * @return {string}
   *   A translated string.
   */
  Drupal.formatPlural = function (count, singular, plural, args, options) {
    args = args || {};
    args['@count'] = count;

    var pluralDelimiter = drupalSettings.pluralDelimiter;
    var translations = Drupal.t(singular + pluralDelimiter + plural, args, options).split(pluralDelimiter);
    var index = 0;

    // Determine the index of the plural form.
    if (typeof drupalTranslations !== 'undefined' && drupalTranslations.pluralFormula) {
      index = count in drupalTranslations.pluralFormula ? drupalTranslations.pluralFormula[count] : drupalTranslations.pluralFormula['default'];
    }
    else if (args['@count'] !== 1) {
      index = 1;
    }

    return translations[index];
  };

  /**
   * Encodes a Drupal path for use in a URL.
   *
   * For aesthetic reasons slashes are not escaped.
   *
   * @param {string} item
   *   Unencoded path.
   *
   * @return {string}
   *   The encoded path.
   */
  Drupal.encodePath = function (item) {
    return window.encodeURIComponent(item).replace(/%2F/g, '/');
  };

  /**
   * Generates the themed representation of a Drupal object.
   *
   * All requests for themed output must go through this function. It examines
   * the request and routes it to the appropriate theme function. If the current
   * theme does not provide an override function, the generic theme function is
   * called.
   *
   * @example
   * <caption>To retrieve the HTML for text that should be emphasized and
   * displayed as a placeholder inside a sentence.</caption>
   * Drupal.theme('placeholder', text);
   *
   * @namespace
   *
   * @param {function} func
   *   The name of the theme function to call.
   * @param {...args}
   *   Additional arguments to pass along to the theme function.
   *
   * @return {string|object|HTMLElement|jQuery}
   *   Any data the theme function returns. This could be a plain HTML string,
   *   but also a complex object.
   */
  Drupal.theme = function (func) {
    var args = Array.prototype.slice.apply(arguments, [1]);
    if (func in Drupal.theme) {
      return Drupal.theme[func].apply(this, args);
    }
  };

  /**
   * Formats text for emphasized display in a placeholder inside a sentence.
   *
   * @param {string} str
   *   The text to format (plain-text).
   *
   * @return {string}
   *   The formatted text (html).
   */
  Drupal.theme.placeholder = function (str) {
    return '<em class="placeholder">' + Drupal.checkPlain(str) + '</em>';
  };

})(Drupal, window.drupalSettings, window.drupalTranslations);
;
// Allow other JavaScript libraries to use $.
if (window.jQuery) {
  jQuery.noConflict();
}

// Class indicating that JS is enabled; used for styling purpose.
document.documentElement.className += ' js';

// JavaScript should be made compatible with libraries other than jQuery by
// wrapping it in an anonymous closure.

(function (domready, Drupal, drupalSettings) {

  'use strict';

  // Attach all behaviors.
  domready(function () { Drupal.attachBehaviors(document, drupalSettings); });

})(domready, Drupal, window.drupalSettings);
;
/**
 * @file
 * Drupal Bootstrap object.
 */

/**
 * All Drupal Bootstrap JavaScript APIs are contained in this namespace.
 *
 * @namespace
 */
(function ($, Drupal) {
  'use strict';

  Drupal.bootstrap = {
    settings: drupalSettings.bootstrap || {}
  };

  /**
   * Wraps Drupal.checkPlain() to ensure value passed isn't empty.
   *
   * Encodes special characters in a plain-text string for display as HTML.
   *
   * @param {string} str
   *   The string to be encoded.
   *
   * @return {string}
   *   The encoded string.
   *
   * @ingroup sanitization
   */
  Drupal.bootstrap.checkPlain = function (str) {
    return str && Drupal.checkPlain(str) || '';
  };

  /**
   * Extends a Bootstrap plugin constructor.
   *
   * @param {string} id
   *   A Bootstrap plugin identifier located in $.fn.
   * @param {function} [callback]
   *   A callback to extend the plugin constructor.
   *
   * @return {function|boolean}
   *   The Bootstrap plugin or FALSE if the plugin does not exist.
   */
  Drupal.bootstrap.extendPlugin = function (id, callback) {
    // Immediately return if the plugin does not exist.
    if (!$.fn[id] || !$.fn[id].Constructor) return false;

    // Extend the plugin if a callback was provided.
    if ($.isFunction(callback)) {
      var ret = callback.apply($.fn[id].Constructor, [this.settings]);
      if ($.isPlainObject(ret)) {
        $.extend(true, $.fn[id].Constructor, ret);
      }
    }

    // Add a jQuery UI like option getter/setter method.
    if ($.fn[id].Constructor.prototype.option === void(0)) {
      $.fn[id].Constructor.prototype.option = this.option;
    }

    return $.fn[id].Constructor;
  };

  /**
   * Replaces a Bootstrap jQuery plugin definition.
   *
   * @param {string} id
   *   A Bootstrap plugin identifier located in $.fn.
   * @param {function} [callback]
   *   A callback to replace the jQuery plugin definition. The callback must
   *   return a function that is used to construct a jQuery plugin.
   *
   * @return {function|boolean}
   *   The Bootstrap jQuery plugin definition or FALSE if the plugin does not
   *   exist.
   */
  Drupal.bootstrap.replacePlugin = function (id, callback) {
    // Immediately return if plugin does not exist or not a valid callback.
    if (!$.fn[id] || !$.fn[id].Constructor || !$.isFunction(callback)) return false;
    var constructor = $.fn[id].Constructor;

    var plugin = callback.apply(constructor);
    if ($.isFunction(plugin)) {
      plugin.Constructor = constructor;

      var old = $.fn[id];
      plugin.noConflict = function () { $.fn[id] = old; return this; };
      $.fn[id] = plugin;
    }
  };

  /**
   * Provide jQuery UI like ability to get/set options for Bootstrap plugins.
   *
   * @param {string|object} key
   *   A string value of the option to set, can be dot like to a nested key.
   *   An object of key/value pairs.
   * @param {*} [value]
   *   (optional) A value to set for key.
   *
   * @returns {*}
   *   - Returns nothing if key is an object or both key and value parameters
   *   were provided to set an option.
   *   - Returns the a value for a specific setting if key was provided.
   *   - Returns an object of key/value pairs of all the options if no key or
   *   value parameter was provided.
   *
   * @see https://github.com/jquery/jquery-ui/blob/master/ui/widget.js
   *
   * @todo This isn't fully working since Bootstrap plugins don't allow
   * methods to return values.
   */
  Drupal.bootstrap.option = function (key, value) {
    var options = key;
    var parts, curOption, i;

    // Don't return a reference to the internal hash.
    if (arguments.length === 0) {
      return $.extend({}, this.options);
    }

    // Handle a specific option.
    if (typeof key === "string") {
      // Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
      options = {};
      parts = key.split(".");
      key = parts.shift();
      if (parts.length) {
        curOption = options[key] = $.extend({}, this.options[key]);
        for (i = 0; i < parts.length - 1; i++) {
          curOption[parts[i]] = curOption[parts[i]] || {};
          curOption = curOption[parts[i]];
        }
        key = parts.pop();
        if (arguments.length === 1) {
          return curOption[key] === undefined ? null : curOption[key];
        }
        curOption[key] = value;
      }
      else {
        if (arguments.length === 1) {
          return this.options[key] === undefined ? null : this.options[key];
        }
        options[key] = value;
      }
    }

    // Set the new option(s).
    for (key in options) {
      if (!options.hasOwnProperty(key)) continue;
      this.options[key] = options[key];
    }
    return this;
  };

})(window.jQuery, window.Drupal, window.drupalSettings);
;
(function ($, _) {

  /**
   * Class to help modify attributes.
   *
   * @param {object} object
   *   An object to initialize attributes with.
   *
   * @constructor
   */
  var Attributes = function (object) {
    this.data = object && _.isObject(object) && _.clone(object) || {};
  };

  /**
   * Renders the attributes object as a string to inject into an HTML element.
   *
   * @returns {string}
   */
  Attributes.prototype.toString = function () {
    var output = '';
    var name, value;
    var checkPlain = function (str) {
      return str && str.toString().replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;') || '';
    };
    for (name in this.data) {
      if (!this.data.hasOwnProperty(name)) continue;
      value = this.data[name];
      if (_.isFunction(value)) value = value();
      if (_.isObject(value)) value = _.values(value);
      if (_.isArray(value)) value = value.join(' ');
      output += ' ' + checkPlain(name) + '="' + checkPlain(value) + '"';
    }
    return output;
  };

  /**
   * Add class(es) to the array.
   *
   * @param {string|Array} value
   *   An individual class or an array of classes to add.
   *
   * @return {Attributes}
   *
   * @chainable
   */
  Attributes.prototype.addClass = function (value) {
    var classes = this.getClasses();
    value = [].concat(classes, value);
    this.set('class', _.uniq(value));
    return this;
  };

  /**
   * Returns whether the requested attribute exists.
   *
   * @param {string} name
   *   An attribute name to check.
   *
   * @return {boolean}
   *   TRUE or FALSE
   */
  Attributes.prototype.exists = function (name) {
    return this.data[name] !== void(0) && this.data[name] !== null;
  };

  /**
   * Retrieve a specific attribute from the array.
   *
   * @param {string} name
   *   The specific attribute to retrieve.
   * @param {*} defaultValue
   *   (optional) The default value to set if the attribute does not exist.
   *
   * @return {*}
   *   A specific attribute value, passed by reference.
   */
  Attributes.prototype.get = function (name, defaultValue) {
    if (!this.exists(name)) this.data[name] = defaultValue;
    return this.data[name];
  };

  /**
   * Retrieves a cloned copy of the internal attributes data object.
   *
   * @returns {Object}
   */
  Attributes.prototype.getData = function () {
    return _.clone(this.data);
  };

  /**
   * Retrieves classes from the array.
   *
   * @return {Array}
   *   The classes array.
   */
  Attributes.prototype.getClasses = function () {
    var classes = [].concat(this.get('class', []));
    return _.uniq(classes);
  };

  /**
   * Indicates whether a class is present in the array.
   *
   * @param {string|Array} name
   *   The class(es) to search for.
   *
   * @return {boolean}
   *   TRUE or FALSE
   */
  Attributes.prototype.hasClass = function (name) {
    name = [].concat(name);
    var classes = this.getClasses();
    var found = false;
    _.each(name, function (value) { if (_.indexOf(classes, value) !== -1) found = true; });
    return found;
  };

  /**
   * Merges multiple values into the array.
   *
   * @param {object} values
   *   An associative key/value array.
   * @param {boolean} [recursive]
   *   Flag determining whether or not to recursively merge key/value pairs.
   *
   * @return {Attributes}
   *
   * @chainable
   */
  Attributes.prototype.merge = function (values, recursive) {
    values = values instanceof Attributes ? values.getData() : values;
    if (recursive === void(0) || recursive) {
      this.data = $.extend(true, {}, this.data, values);
    }
    else {
      $.extend(this.data, values);
    }
    return this;
  };

  /**
   * Removes an attribute from the array.
   *
   * @param {string} name
   *   The name of the attribute to remove.
   *
   * @return {Attributes}
   *
   * @chainable
   */
  Attributes.prototype.remove = function (name) {
    if (this.exists(name)) delete this.data[name];
    return this;
  };

  /**
   * Removes a class from the attributes array.
   *
   * @param {string|Array} value
   *   An individual class or an array of classes to remove.
   *
   * @return {Attributes}
   *
   * @chainable
   */
  Attributes.prototype.removeClass = function (value) {
    this.set('class', _.without(this.getClasses(), [].concat(value)));
    return this;
  };

  /**
   * Replaces a class in the attributes array.
   *
   * @param {string} oldValue
   *   The old class to remove.
   * @param {string} newValue
   *   The new class. It will not be added if the old class does not exist.
   *
   * @return {Attributes}
   *
   * @chainable
   */
  Attributes.prototype.replaceClass = function (oldValue, newValue) {
    var classes = this.getClasses();
    var i = _.indexOf(oldValue, classes);
    if (i >= 0) {
      classes[i] = newValue;
      this.set('class', classes);
    }
    return this;
  };

  /**
   * Sets an attribute on the array.
   *
   * @param {string} name
   *   The name of the attribute to set.
   * @param {*} value
   *   The value of the attribute to set.
   *
   * @return {Attributes}
   *
   * @chainable
   */
  Attributes.prototype.set = function (name, value) {
    this.data[name] = value;
    return this;
  };

  /**
   * Creates an Attributes instance.
   *
   * @param {object|Attributes} object
   *   An object to initialize attributes with.
   *
   * @returns {Attributes}
   *
   * @global
   *
   * @constructor
   */
  window.Attributes = function (object) {
    return object instanceof Attributes ? object : new Attributes(object);
  };

})(window.jQuery, window._);
;
/**
 * @file
 * Theme ho


 oks for the Drupal Bootstrap base theme.
 */
(function ($, Drupal, Bootstrap) {

  /**
   * Fallback for theming an icon if the Icon API module is not installed.
   */
  if (!Drupal.icon) Drupal.icon = { bundles: {} };
  if (!Drupal.theme.icon || Drupal.theme.prototype.icon) {
    $.extend(Drupal.theme, /** @lends Drupal.theme */ {
      /**
       * Renders an icon.
       *
       * @param {string} bundle
       *   The bundle which the icon belongs to.
       * @param {string} icon
       *   The name of the icon to render.
       * @param {object|Attributes} [attributes]
       *   An object of attributes to also apply to the icon.
       *
       * @returns {string}
       */
      icon: function (bundle, icon, attributes) {
        if (!Drupal.icon.bundles[bundle]) return '';
        attributes = Attributes(attributes).addClass('icon').set('aria-hidden', 'true');
        icon = Drupal.icon.bundles[bundle](icon, attributes);
        return '<span' + attributes + '></span>';
      }
    });
  }

  /**
   * Callback for modifying an icon in the "bootstrap" icon bundle.
   *
   * @param {string} icon
   *   The icon being rendered.
   * @param {Attributes} attributes
   *   Attributes object for the icon.
   */
  Drupal.icon.bundles.bootstrap = function (icon, attributes) {
    attributes.addClass(['glyphicon', 'glyphicon-' + icon]);
  };

  /**
   * Add necessary theming hooks.
   */
  $.extend(Drupal.theme, /** @lends Drupal.theme */ {

    /**
     * Renders a Bootstrap AJAX glyphicon throbber.
     *
     * @returns {string}
     */
    ajaxThrobber: function () {
      return Drupal.theme.bootstrapIcon('refresh', {'class': ['ajax-throbber', 'glyphicon-spin'] });
    },

    /**
     * Renders a button element.
     *
     * @param {object|Attributes} attributes
     *   An object of attributes to apply to the button. If it contains one of:
     *   - value: The label of the button.
     *   - context: The context type of Bootstrap button, can be one of:
     *     - default
     *     - primary
     *     - success
     *     - info
     *     - warning
     *     - danger
     *     - link
     *
     * @returns {string}
     */
    button: function (attributes) {
      attributes = Attributes(attributes).addClass('btn');
      var context = attributes.get('context', 'default');
      var label = attributes.get('value', '');
      attributes.remove('context').remove('value');
      if (!attributes.hasClass(['btn-default', 'btn-primary', 'btn-success', 'btn-info', 'btn-warning', 'btn-danger', 'btn-link'])) {
        attributes.addClass('btn-' + Bootstrap.checkPlain(context));
      }
      return '<button' + attributes + '>' + label + '</button>';
    },

    /**
     * Alias for "button" theme hook.
     *
     * @param {object|Attributes} attributes
     *   An object of attributes to apply to the button.
     *
     * @see Drupal.theme.button()
     *
     * @returns {string}
     */
    btn: function (attributes) {
      return Drupal.theme('button', attributes);
    },

    /**
     * Renders a button block element.
     *
     * @param {object|Attributes} attributes
     *   An object of attributes to apply to the button.
     *
     * @see Drupal.theme.button()
     *
     * @returns {string}
     */
    'btn-block': function (attributes) {
      return Drupal.theme('button', Attributes(attributes).addClass('btn-block'));
    },

    /**
     * Renders a large button element.
     *
     * @param {object|Attributes} attributes
     *   An object of attributes to apply to the button.
     *
     * @see Drupal.theme.button()
     *
     * @returns {string}
     */
    'btn-lg': function (attributes) {
      return Drupal.theme('button', Attributes(attributes).addClass('btn-lg'));
    },

    /**
     * Renders a small button element.
     *
     * @param {object|Attributes} attributes
     *   An object of attributes to apply to the button.
     *
     * @see Drupal.theme.button()
     *
     * @returns {string}
     */
    'btn-sm': function (attributes) {
      return Drupal.theme('button', Attributes(attributes).addClass('btn-sm'));
    },

    /**
     * Renders an extra small button element.
     *
     * @param {object|Attributes} attributes
     *   An object of attributes to apply to the button.
     *
     * @see Drupal.theme.button()
     *
     * @returns {string}
     */
    'btn-xs': function (attributes) {
      return Drupal.theme('button', Attributes(attributes).addClass('btn-xs'));
    },

    /**
     * Renders a glyphicon.
     *
     * @param {string} name
     *   The name of the glyphicon.
     * @param {object|Attributes} [attributes]
     *   An object of attributes to apply to the icon.
     *
     * @returns {string}
     */
    bootstrapIcon: function (name, attributes) {
      return Drupal.theme('icon', 'bootstrap', name, attributes);
    }

  });

})(window.jQuery, window.Drupal, window.Drupal.bootstrap);
;
/*!
 * jQuery lockfixed plugin
 * http://www.directlyrics.com/code/lockfixed/
 *
 * Copyright 2012-2015 Yvo Schaap
 * Released under the MIT license
 * http://www.directlyrics.com/code/lockfixed/license.txt
 *
 * Date: Sun March 30 2015 12:00:01 GMT
 */
(function($, undefined) {
    $.extend({
        /**
         * Lockfixed initiated
         * @param {Element} el - a jquery element, DOM node or selector string
         * @param {Object} config - offset - forcemargin
         */
        "lockfixed": function(el, config) {
            if (config && config.offset) {
                config.offset.bottom = parseInt(config.offset.bottom, 10);
                config.offset.top = parseInt(config.offset.top, 10);
            } else {
                config.offset = {
                    bottom: 100,
                    top: 0
                };
            }
            var el = $(el);
            if (el && el.offset()) {
                var el_position = el.css("position"),
                    el_margin_top = parseInt(el.css("marginTop"), 10),
                    el_position_top = el.css("top"),
                    el_top = el.offset().top,
                    pos_not_fixed = false;

                //We prefer feature testing, too much hassle for the upside 
                //while prettier to use position: fixed (less jitter when scrolling)
                //iOS 5+ && Android does has fixed support, but results in issue with toggeling between fixed and viewport zoom

                if (config.forcemargin === true || navigator.userAgent.match(/\bMSIE (4|5|6)\./) || navigator.userAgent.match(/\bOS ([0-9])_/) || navigator.userAgent.match(/\bAndroid ([0-9])\./i)) {
                    pos_not_fixed = true;
                }

                // We wrap the element with the height of the lockfixed, because position: fixed removes the height leaving an empty area (and some jitter)
                el.wrap("<div class='lf-ghost' style='height:" + el.outerHeight() + "px;display:" + el.css("display") + "'></div>");

                // Bind to most comment events that will need to recalculate our lockfixed position
                $(window).bind('DOMContentLoaded load scroll resize orientationchange lockfixed:pageupdate', el, function(e) {
                    // if we have a input focus don't change this (for smaller screens)
                    if (pos_not_fixed && document.activeElement && document.activeElement.nodeName === "INPUT") {
                        return;
                    }

                    //el_width is set by looking at the ghost parent container because that is not affected by css position: fixed 
                    var top = 0,
                        el_height = el.outerHeight(),
                        el_width = el.parent().innerWidth() - parseInt(el.css("marginLeft"), 10) - parseInt(el.css("marginRight"), 10),
                        max_height = $(document).height() - config.offset.bottom,
                        scroll_top = $(window).scrollTop();

                    // if element is not currently fixed position, reset measurements ( this handles DOM changes in dynamic pages )
                    if (el.css("position") !== "fixed" && !pos_not_fixed) {
                        el_top = el.offset().top;
                        el_position_top = el.css("top");
                    }

                    if (scroll_top >= (el_top - (el_margin_top ? el_margin_top : 0) - config.offset.top)) {

                        if (max_height < (scroll_top + el_height + el_margin_top + config.offset.top)) {
                            top = (scroll_top + el_height + el_margin_top + config.offset.top) - max_height;
                        } else {
                            top = 0;
                        }

                        if (pos_not_fixed) {
                            el.css({
                                'marginTop': (parseInt(scroll_top - el_top - top, 10) + (2 * config.offset.top)) + 'px'
                            });
                        } else {
                            el.css({
                                'position': 'fixed',
                                'top': (config.offset.top - top) + 'px',
                                'width': el_width + "px"
                            });
                        }
                    } else {
                        el.css({
                            'position': el_position,
                            'top': el_position_top,
                            'width': el_width + "px",
                            'marginTop': (el_margin_top && !pos_not_fixed ? el_margin_top : 0) + "px"
                        });
                    }
                });
            }
        }
    });
})(jQuery);;
jQuery(function(){




setTimeout(function(){

var url_var_title = getParameterByName('title');
if(window.location.href.indexOf('?') != -1){
  if(window.location.href.indexOf('?field_database_subject_target_id=All') == -1){
    jQuery("#block-views-block-databases-block-7").remove();
  }
  if (url_var_title != ""){
    jQuery("#block-views-block-databases-block-7").remove();
  }
}

function getParameterByName(name, url) {
    if (!url) {
      url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}


  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //START MOVE POPULAR DATABASES TO CONTENT AREA
    popdatabase = jQuery("#block-views-block-databases-block-7");
    jQuery("#block-views-block-databases-block-7").remove();
    jQuery(".table-responsive").prepend(popdatabase);
    jQuery("#block-views-block-databases-block-7").after('<h2 class="block-title database-h2-offset" >All Databases</h2>');
  //END MOVE POPULAR DATABASES TO CONTENT AREA
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//START CREATE JUMPTO SIDEBAR MENU AND POPULATE
  jQuery.lockfixed("#block-bootstrap-ahml-jumptomenu",{offset: {top: 0, bottom: 100}});
  counter = 0;
  var first_item = jQuery(".page-header").text();
  jQuery("#jump-to-menu").append("<p class='jumpto parent_jumpto_item jump_subject' jump_to='item"+counter+"'>"+first_item+"</p>");
  jQuery(".page-header").addClass('item'+counter);
  counter++;
  jQuery(".views-field-title").each(function(){
    jQuery(this).addClass('item'+counter);
    jQuery("#jump-to-menu").append("<p class='jumpto child_jumpto_item' jump_to='item"+counter+"'>"+jQuery(this).text()+"</p>");
    counter++;
  })
  jQuery(".block-title").each(function(){
    if (jQuery(this).text()!="Jump To Menu" && jQuery(this).text()!="Popular Databases" && jQuery(this).text()!="All Databases"){
        jQuery(this).addClass('item'+counter);
        jQuery("#jump-to-menu").append("<p class='jumpto jump_subject' jump_to='item"+counter+"'>"+jQuery(this).text()+"</p>");
        counter++;
    }
  })
  //END CREATE JUMPTO SIDEBAR MENU AND POPULATE
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //START CLICK SIDE MENU ITEM SCROLL TO
    jQuery(".jumpto").click(function(){
      jumpto = jQuery(this).attr('jump_to');
      thisjump = jQuery(this);
      jQuery(".jumpto").each(function(){
        jQuery(this).removeClass("active");
      })
      thisjump.addClass("active");
      jQuery('html,body').animate({
        scrollTop: jQuery("."+jumpto).offset().top-150},
        //scrollTop: 1100},
      'slow');
      jQuery("."+jumpto).trigger("click");
    })



  //END CLICK SIDE MENU ITEM SCROLL TO
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var current_url = window.location.href;
var image_number_counter=0;
if (current_url=='http://dev8.ahml.info/research/database'){
  jQuery(".views-field-field-image").each(function(){
    image_number_counter++;
    if (jQuery(this).find("img").length == 0) {
      jQuery(this).html("<img src='http://dev8.ahml.info/themes/bootstrap_ahml/templates/images/placeholder_"+image_number_counter+".jpg'>");
    }
  })
}

 }, 200);
var current_url = window.location.href;
if (current_url=='http://dev8.ahml.info/'){
jQuery(".view-header").css("height","0px").css("width","100%").css("float","left");
jQuery(".view-header").prependTo("#views_slideshow_cycle_main_test_video_slideshow-block_1");
jQuery("#views_slideshow_controls_text_pause_test_video_slideshow-block_1").remove();
jQuery("#views_slideshow_controls_text_previous_test_video_slideshow-block_1").html("<a href='#'><img style='width:40px' src='http://dev8.ahml.info/images/left_slider_nav.png'></a>");
jQuery("#views_slideshow_controls_text_next_test_video_slideshow-block_1").html("<a href='#'><img style='width:40px' src='http://dev8.ahml.info/images/right_slider_nav.png'></a>");
jQuery("#views_slideshow_controls_text_next_test_video_slideshow-block_1").appendTo("#right-homepage-slider-nav");
jQuery("#views_slideshow_controls_text_previous_test_video_slideshow-block_1").appendTo("#left-homepage-slider-nav");
}
//DATABASE PAGE TURN "GET THE APP" INTO A BUTTON
jQuery(".additional-info").each(function(){
  if (jQuery(this).text().indexOf("Get the App") >= 0){
    jQuery(this).addClass('get-app-button');
  } else {
    jQuery(this).addClass('force-margin-top');
  }
})




jQuery(".views-field-nothing").each(function(){
  if (jQuery(this).text().length==40){
    //jQuery(this).remove();
  }
})

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //START TOGGLE COLUMN NUMBER CHANGE
  jQuery( ".single_column" ).click(function() {
    jQuery( ".slide_over tr" ).animate({
      width: "100%",
      margin: "0px 0% 0px 0px",
      padding: "25px 1% 25px 1%",
      height: "205px"
    }, 1000, function() {
      jQuery(".table-striped>tbody>tr:nth-of-type(odd)").css("background-color","#f9f9f9");
    });
  });
  jQuery( ".double_column" ).click(function() {
    jQuery( ".slide_over tr" ).animate({
      width: "47%",
      margin: "0px 1% 0px 1%",
      padding: "20px 1% 20px 1%",
      height: "275px"
    }, 1000, function() {
      jQuery(".table-striped>tbody>tr:nth-of-type(odd)").css("background-color","transparent");
    });
  });
  jQuery( ".triple_column" ).click(function() {
    jQuery( ".slide_over tr" ).animate({
      width: "30%",
      margin: "0px 1% 0px 1%",
      padding: "0px 1% 0px 1%",
      height: "355px"
    }, 1000, function() {
      // Animation complete.
    });
  });
  //END TOGGLE COLUMN NUMBER CHANGE
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


});


jQuery(".show-all-on-click").each(function(){
  if (jQuery(this).text().length > 290){
    jQuery(this).hide();
    jQuery(this).append("<span class='hide-all-content'>Close</span>");
  } else {
    jQuery(this).parent().find(".show-all-content").remove();
  }
})
jQuery( document ).on( 'click', '.hide-all-content', function() {
  jQuery(this).parent().slideUp();
  jQuery(this).parent().prev(".show-all-content").show();
});
jQuery( document ).on( 'click', '.show-all-content', function() {
  jQuery(this).hide();
  jQuery(this).next(".show-all-on-click").slideToggle( "slow", function() {
    //complete
  });
});



jQuery(".slide_down_trigger").click(function(){
  jQuery(this).next(".slide-down-info").slideToggle( "slow", function() {
    // Animation complete.
  });
})

if (jQuery("#search_results").width() < 1233 && jQuery("#search_results").width() >= 1126){
jQuery(".border_button").css("padding","8px 10px");
}
if (jQuery("#search_results").width() < 1226 && jQuery("#search_results").width() > 1126){
jQuery(".border_button").css("padding","8px 10px");
}


var container_width = jQuery(".slide_over").width();
var min_div_size = 375;
console.log(container_width/min_div_size);




  jQuery("#db_facet_select").append("<select class='db_facet_select'></select>");
  jQuery("#db_alpha_list").append("<select class='db_alpha_select'></select>");
  jQuery(".database-subject-list a").each(function() {
    jQuery(".db_facet_select").append("<option value=''>"+jQuery(this).text()+"</option>");
    jQuery(this).remove();
  });
  jQuery(".glossary_letter").each(function() {
    jQuery(".db_alpha_select").append("<option value=''>"+jQuery(this).text()+"</option>");
    jQuery(this).remove();
  });
//SCRIPT FOR A-Z - Call .glossary_letter on any letter to have script take you to current url/letter
jQuery(".glossary_letter").click(function(){
  var letter = window.location.protocol + "//" + window.location.host + "/" + window.location.pathname + "/" + jQuery(this).text();
  window.location = letter;
})


jQuery("#openme").hide();
//Test if admin menu at top of page and call stick for sidebar with top offset based on existance of admin menu
/**if(document.getElementById("toolbar-administration") !== null)
{
  jQuery(".region-sidebar-first").sticky({topSpacing:100});
} else {
  jQuery(".region-sidebar-first").sticky({topSpacing:0});
}**/
jQuery(document).ready(function() {

jQuery(".facet_bar_primary").before('<div id="open_sidebar">&#9193;</div>');
jQuery("#open_sidebar").on( "click", function() {
  jQuery("#open_sidebar").fadeOut('slow');
  jQuery( ".col-sm-10.slide_over" ).animate({
    width: "83.33333333%"
  }, 400, function() {
    // Animation complete.
  });
});
  //var stickyTop = jQuery('.region-sidebar-first').offset().top;
  var stickyBottom = jQuery(".footer").outerHeight();

if (!document.getElementById("toolbar-item-administration")) {
  var scroll_offset = 0;
} else {
  var scroll_offset = 78;
}
jQuery("#close_sidebar").click(function(){
  jQuery("#open_sidebar").fadeIn('slow');
  jQuery( ".col-sm-10.slide_over" ).animate({
    width: "100%"
  }, 400, function() {
  });
})
  jQuery(window).scroll(function() {
      var windowTop = jQuery(window).scrollTop();

      if (windowTop > 276 && (jQuery('#jump-to-menu').offset().top + jQuery('#jump-to-menu').height()) < (jQuery(document).height() - jQuery(".footer").outerHeight() + 10)){
        jQuery('.views-exposed-form').css('position', 'fixed').css('width', '100%').css('top', scroll_offset+'px').css('z-index', '500').css('padding', '10px 10px 8px 35px');
        jQuery('.column-selector').css('z-index', '600').css('position', 'fixed').css('top', '0');
        jQuery('.single_column').css('right', '121px');
        jQuery('.double_column').css('right', '73px');
        jQuery('.triple_column').css('right', '25px');
        jQuery('#open_sidebar').css('position','fixed');
        jQuery(".region-sidebar-first").removeAttr("style")
        jQuery('.region-sidebar-first').css('position', 'fixed');
        jQuery('.region-sidebar-first').css('width', '16.66666667%');
        jQuery('.region-sidebar-first').css('top', scroll_offset+'px');
        console.log("1");
      } else if (windowTop < 276 && (jQuery('#jump-to-menu').offset().top + jQuery('#jump-to-menu').height()) < (jQuery(document).height() - jQuery(".footer").outerHeight() + 10)){
        jQuery('.views-exposed-form').removeAttr('style');
        jQuery('.column-selector').removeAttr('style');
        jQuery('.single_column').removeAttr('style');
        jQuery('.double_column').removeAttr('style');
        jQuery('.triple_column').removeAttr('style');
        jQuery('#open_sidebar').css('position','absolute');
        jQuery(".region-sidebar-first").removeAttr("style")
        jQuery('.region-sidebar-first').css('position', 'inherit');
        jQuery('.region-sidebar-first').css('width', '100%');
        console.log("2");
      }

      if ((jQuery('#jump-to-menu').offset().top + jQuery('#jump-to-menu').height()) > (jQuery(document).height() - jQuery(".footer").outerHeight() + 10) ){
        //jQuery("#block-bootstrap-ahml-jumptomenu").outerHeight()+jQuery(".footer").height();
        jQuery(".region-sidebar-first").removeAttr("style");
        jQuery("#block-bootstrap-ahml-jumptomenu").removeAttr("style");
        jQuery('#block-bootstrap-ahml-jumptomenu').css('position', 'absolute');
        jQuery('#block-bootstrap-ahml-jumptomenu').css('bottom', '0px');
        console.log((jQuery('#jump-to-menu').offset().top + jQuery('#jump-to-menu').height())+" AND "+(jQuery(document).height() - jQuery(".footer").outerHeight() + 10));
        return;
      }
  });




    jQuery(".jason-toggle").click(function(){
      jQuery(".slideout-menu").animate({left: '-250px'});
      jQuery('.js-slideout-toggle').css("visibility","visible")
      jQuery(".studio_page").animate({width: '100%'});
    });
      jQuery('.menu-slideout-toggle').click(function(e) {
      e.preventDefault();
      var name = jQuery(this).attr('where');
      var pos = jQuery('a[name='+name+']').offset();
      jQuery('body').animate({ scrollTop: pos.top });
    });
   var screen_width = jQuery(window).width();
   var first_left = screen_width + 250;
   console.log("Screen is: "+screen_width+" wide");

   jQuery(".accord_title").click(function(){
      if (jQuery(this).next().is(":visible")){
        jQuery(this).next().slideUp();
      } else {
        jQuery(this).next().slideDown();
      }
  })

 if (screen_width > 780){
          jQuery(".nav-links").css("display","none !important");
          jQuery('.menu-slideout-toggle').click(function(e) {
              e.preventDefault();
              var name = jQuery(this).attr('where');
              var pos = jQuery('a[name='+name+']').offset();
              jQuery('body').animate({ scrollTop: pos.top });

          });

          jQuery(".studio_page").animate({width: '85%'});

          jQuery(".slideout-menu").animate({left: '0px'});

          jQuery('.js-slideout-toggle').click(function() {
            jQuery(this).css("visibility","hidden")
            jQuery(".studio_page").animate({width: '85%'});
            jQuery(".slideout-menu").animate({left: '0px'});
            //slideout.toggle();
          });

          jQuery('.jason-toggle').click(function() {
            //slideout.toggle();
            jQuery(".slideout-menu").animate({left: '-250px'});
            jQuery('.js-slideout-toggle').css("visibility","visible")
            jQuery(".studio_page").animate({width: '100%'});
          });
          jQuery('.menu').click(function(eve) {
            if (eve.target.nodeName === 'A') { slideout.close(); }
          });
        jQuery(".submenu-back-icon").click(function(event){
          jQuery("#facets_sidebar").animate({
            left: '-21%',
            width:'0px'});
          jQuery("#search_results").animate({width: '100%'});
          jQuery("#facets_pull_tab").show();
        })

jQuery("#facets_pull_tab").click(function(event){
  jQuery("#facets_sidebar").animate({
    left: '0%',
    width:'21%'});
  jQuery("#search_results").animate({width: '75%'});
  jQuery("#facets_pull_tab").show();
})

      jQuery(window).scroll(function(e){
            var jQueryel = jQuery('#facets_sidebar');
            var isPositionFixed = (jQueryel.css('position') == 'fixed');
            if (jQuery(this).scrollTop() > 190 && !isPositionFixed){
              jQuery('#facets_sidebar').css({'position': 'fixed', 'top': '30px'});
            }
            if (jQuery(this).scrollTop() < 190 && isPositionFixed)
            {
              jQuery('#facets_sidebar').css({'position': 'relative', 'top': '0px'});
            }
        });

      jQuery(window).scroll(function(e){
        var jQueryel = jQuery('#facets_pull_tab');
        var isPositionFixed = (jQueryel.css('position') == 'fixed');
        if (jQuery(this).scrollTop() > 190 && !isPositionFixed){
          jQuery('#facets_pull_tab').css({'position': 'fixed', 'top': '30px'});
        }
        if (jQuery(this).scrollTop() < 190 && isPositionFixed)
        {
          jQuery('#facets_pull_tab').css({'position': 'absolute', 'top': '0px'});
        }
    });
  } else {
     jQuery(window).scroll(function(e){
        console.log(jQuery(this).scrollTop());

      var jQueryel = jQuery('.submenu-top');
      var isPositionFixed = (jQueryel.css('position') == 'fixed');
      if (jQuery(this).scrollTop() > 260 && !isPositionFixed){
        jQuery('.submenu-top').css({'position': 'fixed', 'top': '30px'});
        jQuery('#facets_sidebar').css({'top': '80px'});
      }
      if (jQuery(this).scrollTop() < 260 && isPositionFixed)
      {
        jQuery('.submenu-top').css({'position': 'static', 'top': '0px'});
        jQuery('#facets_sidebar').css({'top': '0px'});
      }
    });
    jQuery(".submenu-back-icon").click(function(event){
      if (jQuery("#facets_sidebar").css("height")=="190px"){
        jQuery("#facets_sidebar").animate({
          height: '50px'
        });
        jQuery(".submenu-back-icon").text("v");
        jQuery(".submenu-back-icon").css("padding-top","0px");
        jQuery(".submenu-back-icon").css("padding-left","10px");
        jQuery(".submenu-back-icon").css("font-size","38px");
        jQuery("#facets_sidebar").css("position","absolute","top","0px");
      } else {
        jQuery("#facets_sidebar").animate({
          height: '190px'
        });
        jQuery(".submenu-back-icon").text("^");
        jQuery(".submenu-back-icon").css("padding-top","4px");
        jQuery(".submenu-back-icon").css("padding-left","8px");
        jQuery(".submenu-back-icon").css("font-size","48px");
        jQuery("#facets_sidebar").css("position","fixed","top","80px");
      }
    })
}


  jQuery(".leaf_login").click(function(event){
    event.preventDefault();
    if ( jQuery( "#login-inner" ).is( ":hidden" ) ) {
      jQuery( "#login-inner" ).slideDown( "slow" );
    } else {
      jQuery( "#login-inner" ).slideUp( "slow" );
    }
  })



jQuery("#facets_pull_tab").click(function(event){
  jQuery("#facets_sidebar").animate({
    right: '0%',
    width:'21%'});
  jQuery("#search_results").animate({width: '75%'});
  jQuery("#facets_pull_tab").show();
})
jQuery("#search_results_options").hover(function(){
  jQuery("#search_results_options").animate({width: '230px', height: '65px'});
  jQuery(".result_options_p").hide();
  jQuery(".showing_results").animate({padding: '55px 0px 4px 2.5%'});
}, function() {
    jQuery("#search_results_options").animate({width: '35px', height: '33px'});
    jQuery(".result_options_p").show();
    jQuery(".showing_results").animate({padding: '21px 0px 4px 2.5%'});
  })

})

function resizer(){
  if (jQuery(".search_found_record").width() < 874){
  jQuery(".result_content_center").css("display","none");
  jQuery(".result_content_left").css("width","75%");
  } else {
  jQuery(".result_content_center").css("display","inherit");
  jQuery(".result_content_left").css("width","40%");
  }
}

jQuery(".half_layout").click(function(){
setTimeout(resizer, 400);
jQuery(".search_found_record").animate({
    width:'48%',
    margin: '0px 1% 1% 1%'});
if (jQuery(".search_found_record").width() < 874){
jQuery(".result_content_center").css("display","none");
jQuery("..result_content_left").css("width","75px");
}
})
jQuery(".full_layout").click(function(){
  setTimeout(resizer, 400);
jQuery(".search_found_record").animate({
    width:'95%',
    margin: '0px 2.5% 30px 2.5%'});
})
if (jQuery(window).width() < 767) {
   jQuery('.submenu-back-icon').text("v");
}
jQuery(".thirds_layout").click(function(){
  setTimeout(resizer, 400);

jQuery(".search_found_record").animate({
    width:'31%',
    margin: '0px 1% 1% 1%'});
})
;
// Sticky Plugin v1.0.4 for jQuery
// =============
// Author: Anthony Garand
// Improvements by German M. Bravo (Kronuz) and Ruud Kamphuis (ruudk)
// Improvements by Leonardo C. Daronco (daronco)
// Created: 02/14/2011
// Date: 07/20/2015
// Website: http://stickyjs.com/
// Description: Makes an element on the page stick on the screen as you scroll
//              It will only set the 'top' and 'position' of your element, you
//              might need to adjust the width in some cases.

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node/CommonJS
        module.exports = factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {
    var slice = Array.prototype.slice; // save ref to original slice()
    var splice = Array.prototype.splice; // save ref to original slice()

  var defaults = {
      topSpacing: 0,
      bottomSpacing: 0,
      className: 'is-sticky',
      wrapperClassName: 'sticky-wrapper',
      center: false,
      getWidthFrom: '',
      widthFromWrapper: true, // works only when .getWidthFrom is empty
      responsiveWidth: false,
      zIndex: 'auto'
    },
    $window = $(window),
    $document = $(document),
    sticked = [],
    windowHeight = $window.height(),
    scroller = function() {
      var scrollTop = $window.scrollTop(),
        documentHeight = $document.height(),
        dwh = documentHeight - windowHeight,
        extra = (scrollTop > dwh) ? dwh - scrollTop : 0;

      for (var i = 0, l = sticked.length; i < l; i++) {
        var s = sticked[i],
          elementTop = s.stickyWrapper.offset().top,
          etse = elementTop - s.topSpacing - extra;

        //update height in case of dynamic content
        s.stickyWrapper.css('height', s.stickyElement.outerHeight());

        if (scrollTop <= etse) {
          if (s.currentTop !== null) {
            s.stickyElement
              .css({
                'width': '',
                'position': '',
                'top': '',
                'z-index': ''
              });
            s.stickyElement.parent().removeClass(s.className);
            s.stickyElement.trigger('sticky-end', [s]);
            s.currentTop = null;
          }
        }
        else {
          var newTop = documentHeight - s.stickyElement.outerHeight()
            - s.topSpacing - s.bottomSpacing - scrollTop - extra;
          if (newTop < 0) {
            newTop = newTop + s.topSpacing;
          } else {
            newTop = s.topSpacing;
          }
          if (s.currentTop !== newTop) {
            var newWidth;
            if (s.getWidthFrom) {
                newWidth = $(s.getWidthFrom).width() || null;
            } else if (s.widthFromWrapper) {
                newWidth = s.stickyWrapper.width();
            }
            if (newWidth == null) {
                newWidth = s.stickyElement.width();
            }
            s.stickyElement
              .css('width', newWidth)
              .css('position', 'fixed')
              .css('top', newTop)
              .css('z-index', s.zIndex);

            s.stickyElement.parent().addClass(s.className);

            if (s.currentTop === null) {
              s.stickyElement.trigger('sticky-start', [s]);
            } else {
              // sticky is started but it have to be repositioned
              s.stickyElement.trigger('sticky-update', [s]);
            }

            if (s.currentTop === s.topSpacing && s.currentTop > newTop || s.currentTop === null && newTop < s.topSpacing) {
              // just reached bottom || just started to stick but bottom is already reached
              s.stickyElement.trigger('sticky-bottom-reached', [s]);
            } else if(s.currentTop !== null && newTop === s.topSpacing && s.currentTop < newTop) {
              // sticky is started && sticked at topSpacing && overflowing from top just finished
              s.stickyElement.trigger('sticky-bottom-unreached', [s]);
            }

            s.currentTop = newTop;
          }

          // Check if sticky has reached end of container and stop sticking
          var stickyWrapperContainer = s.stickyWrapper.parent();
          var unstick = (s.stickyElement.offset().top + s.stickyElement.outerHeight() >= stickyWrapperContainer.offset().top + stickyWrapperContainer.outerHeight()) && (s.stickyElement.offset().top <= s.topSpacing);

          if( unstick ) {
            s.stickyElement
              .css('position', 'absolute')
              .css('top', '')
              .css('bottom', 0)
              .css('z-index', '');
          } else {
            s.stickyElement
              .css('position', 'fixed')
              .css('top', newTop)
              .css('bottom', '')
              .css('z-index', s.zIndex);
          }
        }
      }
    },
    resizer = function() {
      windowHeight = $window.height();

      for (var i = 0, l = sticked.length; i < l; i++) {
        var s = sticked[i];
        var newWidth = null;
        if (s.getWidthFrom) {
            if (s.responsiveWidth) {
                newWidth = $(s.getWidthFrom).width();
            }
        } else if(s.widthFromWrapper) {
            newWidth = s.stickyWrapper.width();
        }
        if (newWidth != null) {
            s.stickyElement.css('width', newWidth);
        }
      }
    },
    methods = {
      init: function(options) {
        return this.each(function() {
          var o = $.extend({}, defaults, options);
          var stickyElement = $(this);

          var stickyId = stickyElement.attr('id');
          var wrapperId = stickyId ? stickyId + '-' + defaults.wrapperClassName : defaults.wrapperClassName;
          var wrapper = $('<div></div>')
            .attr('id', wrapperId)
            .addClass(o.wrapperClassName);

          stickyElement.wrapAll(function() {
            if ($(this).parent("#" + wrapperId).length == 0) {
                    return wrapper;
            }
});

          var stickyWrapper = stickyElement.parent();

          if (o.center) {
            stickyWrapper.css({width:stickyElement.outerWidth(),marginLeft:"auto",marginRight:"auto"});
          }

          if (stickyElement.css("float") === "right") {
            stickyElement.css({"float":"none"}).parent().css({"float":"right"});
          }

          o.stickyElement = stickyElement;
          o.stickyWrapper = stickyWrapper;
          o.currentTop    = null;

          sticked.push(o);

          methods.setWrapperHeight(this);
          methods.setupChangeListeners(this);
        });
      },

      setWrapperHeight: function(stickyElement) {
        var element = $(stickyElement);
        var stickyWrapper = element.parent();
        if (stickyWrapper) {
          stickyWrapper.css('height', element.outerHeight());
        }
      },

      setupChangeListeners: function(stickyElement) {
        if (window.MutationObserver) {
          var mutationObserver = new window.MutationObserver(function(mutations) {
            if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {
              methods.setWrapperHeight(stickyElement);
            }
          });
          mutationObserver.observe(stickyElement, {subtree: true, childList: true});
        } else {
          if (window.addEventListener) {
            stickyElement.addEventListener('DOMNodeInserted', function() {
              methods.setWrapperHeight(stickyElement);
            }, false);
            stickyElement.addEventListener('DOMNodeRemoved', function() {
              methods.setWrapperHeight(stickyElement);
            }, false);
          } else if (window.attachEvent) {
            stickyElement.attachEvent('onDOMNodeInserted', function() {
              methods.setWrapperHeight(stickyElement);
            });
            stickyElement.attachEvent('onDOMNodeRemoved', function() {
              methods.setWrapperHeight(stickyElement);
            });
          }
        }
      },
      update: scroller,
      unstick: function(options) {
        return this.each(function() {
          var that = this;
          var unstickyElement = $(that);

          var removeIdx = -1;
          var i = sticked.length;
          while (i-- > 0) {
            if (sticked[i].stickyElement.get(0) === that) {
                splice.call(sticked,i,1);
                removeIdx = i;
            }
          }
          if(removeIdx !== -1) {
            unstickyElement.unwrap();
            unstickyElement
              .css({
                'width': '',
                'position': '',
                'top': '',
                'float': '',
                'z-index': ''
              })
            ;
          }
        });
      }
    };

  // should be more efficient than using $window.scroll(scroller) and $window.resize(resizer):
  if (window.addEventListener) {
    window.addEventListener('scroll', scroller, false);
    window.addEventListener('resize', resizer, false);
  } else if (window.attachEvent) {
    window.attachEvent('onscroll', scroller);
    window.attachEvent('onresize', resizer);
  }

  $.fn.sticky = function(method) {
    if (methods[method]) {
      return methods[method].apply(this, slice.call(arguments, 1));
    } else if (typeof method === 'object' || !method ) {
      return methods.init.apply( this, arguments );
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.sticky');
    }
  };

  $.fn.unstick = function(method) {
    if (methods[method]) {
      return methods[method].apply(this, slice.call(arguments, 1));
    } else if (typeof method === 'object' || !method ) {
      return methods.unstick.apply( this, arguments );
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.sticky');
    }
  };
  $(function() {
    setTimeout(scroller, 0);
  });
}));
;
/**
 * @file
 * Bootstrap Popovers.
 */

var Drupal = Drupal || {};

(function ($, Drupal, Bootstrap) {
  "use strict";

  /**
   * Extend the Bootstrap Popover plugin constructor class.
   */
  Bootstrap.extendPlugin('popover', function (settings) {
    return {
      DEFAULTS: {
        animation: !!settings.popover_animation,
        html: !!settings.popover_html,
        placement: settings.popover_placement,
        selector: settings.popover_selector,
        trigger: settings.popover_trigger,
        triggerAutoclose: !!settings.popover_trigger_autoclose,
        title: settings.popover_title,
        content: settings.popover_content,
        delay: parseInt(settings.popover_delay, 10),
        container: settings.popover_container
      }
    };
  });

  /**
   * Bootstrap Popovers.
   *
   * @todo This should really be properly delegated if selector option is set.
   */
  Drupal.behaviors.bootstrapPopovers = {
    attach: function (context) {

      // Popover autoclose.
      if ($.fn.popover.Constructor.DEFAULTS.triggerAutoclose) {
        var $currentPopover = null;
        $(document)
          .on('show.bs.popover', '[data-toggle=popover]', function () {
            var $trigger = $(this);
            var popover = $trigger.data('bs.popover');

            // Only keep track of clicked triggers that we're manually handling.
            if (popover.options.originalTrigger === 'click') {
              if ($currentPopover && !$currentPopover.is($trigger)) {
                $currentPopover.popover('hide');
              }
              $currentPopover = $trigger;
            }
          })
          .on('click', function (e) {
            var $target = $(e.target);
            var popover = $target.is('[data-toggle=popover]') && $target.data('bs.popover');
            if ($currentPopover && !$target.is('[data-toggle=popover]') && !$target.closest('.popover.in')[0]) {
              $currentPopover.popover('hide');
              $currentPopover = null;
            }
          })
        ;
      }

      var elements = $(context).find('[data-toggle=popover]').toArray();
      for (var i = 0; i < elements.length; i++) {
        var $element = $(elements[i]);
        var options = $.extend({}, $.fn.popover.Constructor.DEFAULTS, $element.data());

        // Store the original trigger.
        options.originalTrigger = options.trigger;

        // If the trigger is "click", then we'll handle it manually here.
        if (options.trigger === 'click') {
          options.trigger = 'manual';
        }

        // Retrieve content from a target element.
        var $target = $(options.target || $element.is('a[href^="#"]') && $element.attr('href')).clone();
        if (!options.content && $target[0]) {
          $target.removeClass('visually-hidden hidden').removeAttr('aria-hidden');
          options.content = $target.wrap('<div/>').parent()[options.html ? 'html' : 'text']() || '';
        }

        // Initialize the popover.
        $element.popover(options);

        // Handle clicks manually.
        if (options.originalTrigger === 'click') {
          // To ensure the element is bound multiple times, remove any
          // previously set event handler before adding another one.
          $element
            .off('click.drupal.bootstrap.popover')
            .on('click.drupal.bootstrap.popover', function (e) {
              $(this).popover('toggle');
              e.preventDefault();
              e.stopPropagation();
            })
          ;
        }
      }
    },
    detach: function (context) {
      // Destroy all popovers.
      $(context).find('[data-toggle="popover"]')
        .off('click.drupal.bootstrap.popover')
        .popover('destroy')
      ;
    }
  };

})(window.jQuery, window.Drupal, window.Drupal.bootstrap);
;
/**
 * @file
 * Bootstrap Tooltips.
 */

var Drupal = Drupal || {};

(function ($, Drupal, Bootstrap) {
  "use strict";

  /**
   * Extend the Bootstrap Tooltip plugin constructor class.
   */
  Bootstrap.extendPlugin('tooltip', function (settings) {
    return {
      DEFAULTS: {
        animation: !!settings.tooltip_animation,
        html: !!settings.tooltip_html,
        placement: settings.tooltip_placement,
        selector: settings.tooltip_selector,
        trigger: settings.tooltip_trigger,
        delay: parseInt(settings.tooltip_delay, 10),
        container: settings.tooltip_container
      }
    };
  });

  /**
   * Bootstrap Tooltips.
   *
   * @todo This should really be properly delegated if selector option is set.
   */
  Drupal.behaviors.bootstrapTooltips = {
    attach: function (context) {
      var elements = $(context).find('[data-toggle="tooltip"]').toArray();
      for (var i = 0; i < elements.length; i++) {
        var $element = $(elements[i]);
        var options = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, $element.data());
        $element.tooltip(options);
      }
    },
    detach: function (context) {
      // Destroy all tooltips.
      $(context).find('[data-toggle="tooltip"]').tooltip('destroy');
    }
  };

})(window.jQuery, window.Drupal, window.Drupal.bootstrap);
;
